practical 4

Aim: Importing the JSON data to the MongoDB
Q1.Write a MongoDB query to display all the documents in the collection TYCSRN.

Code: db.orders.find().pretty()
 
Q2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection TYCSRN.

Code:db.orders.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()

 

Q3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection TYCSRN.

Code: db.orders.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0}).pretty()

 
Q4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection TYCSRN.

Code:db.orders.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1}).pretty()

 
Q5. Write a MongoDB query to display all the documents which is in the borough is Bronx.

Code: db.orders.find({"borough":"Bronx"}).pretty()

 
Q6. Write a MongoDB query to display the first 5 records which is in the borough Bronx.

Code: db.orders.find({“borough”:”Bronx”}).limit(5)

 
Q7. Write a MongoDB query to display the next 5 TYCSRN after skipping first 5 which are in the borough Bronx.

Code: db.orders.find({“borough”:”Bronx”}).limit(5)

 
Q8. Write a MongoDB query to find the TYCSRN who achieved a score more than 90.

Code: db.orders.find({grades:{$elemMatch:{"score":{$gt:90}}}})

 
Q9. Write a MongoDB query to find the TYCSRN that achieved a score, more than 80 but less than 100.

Code: db.orders.find({grades:{$elemMatch:{"score":{$gt:80,$lt:100}}}})

 
Q10. Write a MongoDB query to find the TYCSRN which locate in latitude value less than - 95.754168.

Code: db.orders.find({"address.coord":{$lt: -95.754168}}).pretty()

 
Q11. Write a MongoDB query to find the TYCSRN that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than 65.754168.

Code:db.orders.find({$and:[{"cuisine":{$ne:"American"}},{"grades.score":{$gt:70}},{"address.coord":{$lt: -65.754168}}]}).pretty()

 
Q12. Write a MongoDB query to find the TYCSRN which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than - 65.754168.

Code: db.orders.find({"cuisine":{$ne:"American"},"grades.score":{$gt:70},"address.coord":{$lt: -65.754168}}).pretty()

 
Q13. Write a MongoDB query to find the TYCSRN which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

Code:db.orders.find({"cuisine":{$ne:"American"},"grades.grade":"A","borough":"Brooklyn"}).sort({"cuisine": -1}).pretty()

 
Q14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which contain 'Wil' as first three letters for its name.

Code:db.orders.find({name:/^Wil/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()
 
Q15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which contain 'ces' as last three letters for its name.

Code:db.orders.find({name:/ces$/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()

 
Q16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which contain 'Reg' as three letters somewhere in its name.

Code:db.orders.find({"name":/.*Reg.*/},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()

 
Q17. Write a MongoDB query to find the TYCSRN which belong to the borough Bronx and prepared either American or Chinese dish.

Code:db.orders.find({"borough":"Bronx",$or:[{"cuisine":"American"},{"cuisine":"Chinese"}]}).pretty()

 
Q18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which belong to the borough Staten Island or Queens or Bronxor Brooklyn .

Code:db.orders.find({"borough":{$in:["StatenIsland","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()
 
Q19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.

Code:db.orders.find({"borough":{$nin:["StatenIsland","Queens","Bronx","Brooklyn"]}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()

 
Q20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which achieved a score which is not more than 10.

Code:db.orders.find({"grades.score":{$not:{$gt:10}}},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()

 
Q21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those TYCSRN which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'

Code:db.orders.find({$or:[{name:/^Wil/},{"$and":[{"cuisine":{$ne:"American"}},{"cuisine":{$ne:"Chinees"}}]}]},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty()

 
Q22. Write a MongoDB query to find the restaurant Id, name, and grades for those TYCSRN which achieved a grade of "A" and scored 11 on an ISODate "201408-11T00:00:00Z" among many of survey dates.

Code: db.orders.find({"grades.date":ISODate("201408-11T00:00:00Z"),"grades.grade":"A","grades.score":11},{"restaurant_id":1,"name":1,"grades":1}).pretty()

 
Q23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".

Code: db.orders.find({"grades.1.date":ISODate("2014-08-11T00:00:00Z"),"grades.1.grade":"A","grades.1.score":9},{"restaurant_id":1,"name":1,"grades":1}).pretty()
 
Q24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those TYCSRN where 2nd element of coord array contains a value which is more than 42 and upto 52.

Code:db.orders.find({"address.coord.1":{$gt:42,$lte:52}},{"restaurant_id":1,"name":1,"address":1,"coord":1}).pretty()

 
Q25. Write a MongoDB query to arrange the name of the TYCSRN in ascending order along with all the columns.

Code: db.orders.find().sort({"name":1}).pretty()	

 
Q26. Write a MongoDB query to arrange the name of the TYCSRN in descending along with all the columns.

Code: db.orders.find().sort({"name": -1}).pretty()

 
Q27.  Write a MongoDB query to arranged the name of the cuisine in ascending order and borough should be in descending order

Code: db.orders.find().sort({"cuisine": 1,"borough": -1}).pretty()

 
Q28. Write a MongoDB query to know whether all the addresses contains the street or not.

Code: db.orders.find({"address.street":{$exists:true}}).pretty()

 
Q29. Write a MongoDB query which will select all documents in the TYCSRN collection where the coord field value is Double

Code: db.orders.find({"address.coord":{$type:1}}).pretty()

 
Q30. Write a MongoDB query which will select the restaurant Id, name and grades for those TYCSRN which returns 0 as a remainder after dividing the score by 7.

Code:db.orders.find({"grades.score":{$mod:[7,0]}},{"restaurant_id":1,"name":1,"grades":1}).pretty()

 
Q31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those TYCSRN which contains 'mon' as three letters somewhere in its name.

Code:db.orders.find({name:{$regex:"mon,*",$options:"i"}},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty()

 
Q32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those TYCSRN which contain 'Mad' as first three letters of its name.

Code:db.orders.find({name:{$regex:/^Mad/i}},{"name":1,"borough":1,"address.coord":1,"cuisine":1}).pretty()